[gcode_macro LOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=LOAD_FILAMENT
  M83                                     # set extruder to relative
  G1 E45 F300                             # quickly load filament to down filament path
  G1 E40 F300                             # slower extrusion for hotend path / prime
  RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

# #####################################################################
# #  filament related 
# #####################################################################
# #  SET_RETRACTION [RETRACT_LENGTH=<mm>] [RETRACT_SPEED=<mm/s>] [UNRETRACT_EXTRA_LENGTH=<mm>] [UNRETRACT_SPEED=<mm/s>]
# #  SET_RETRACTION is commonly set as part of slicer per-filament configuration, as different filaments require different
# #  parameter settings.
# #  GET_RETRACTION Queries the current parameters used by firmware retraction and displays them on 
# [firmware_retraction]
# #   The length of filament (in mm) to retract when G10 is activated,
# #   and to unretract when G11 is activated
# retract_length: 0.75
# #   The length (in mm) of *additional* filament to add when
# #   unretracting.
# unretract_extra_length: 0
# retract_speed: 70
# unretract_speed: 40

# [gcode_macro FILAMENT_LOAD]
# description: Load filament and disable rounout while running
# gcode:
#   ##### get user defines #####
#   {% set add_temp = printer['gcode_macro _USER_VARIABLE'].extruder_min_add|int %}
#   {% set load = printer['gcode_macro _USER_VARIABLE'].load_distance %}
#   {% set extrude = printer['gcode_macro _USER_VARIABLE'].load_extrude %}
#   {% set retract = printer['gcode_macro _USER_VARIABLE'].retract_end|float * -1 %}
#   {% set purge_x = printer['gcode_macro _USER_VARIABLE'].purge_x %}
#   {% set purge_y = printer['gcode_macro _USER_VARIABLE'].purge_y %}
#   {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
#   {% set purge_z = printer['gcode_macro _USER_VARIABLE'].purge_z %}
#   {% set z_min_delta = printer['gcode_macro _USER_VARIABLE'].z_min_delta %}
#    ##### get hardware enables #####
#   {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
#   {% set ena_runout = printer['gcode_macro _USER_VARIABLE'].runout|lower %}
#   ##### get toolhead position #####
#   {% set act_z = printer.toolhead.position.z|float %}
#   ##### store extruder temps #####
#   {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
#   {% set extruder_target = printer.extruder.target %}
#   ##### calc movement high #####
#   {% if act_z < z_hop %}
#     {% set move_z = z_hop %}
#   {% else %}
#     {% set move_z = act_z %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
#     SAVE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
#     {% if ena_runout == 'motion' %}
#       SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
#     {% endif %}
#     ## Move to waste bin
#     _CG28                          ; home if not already homed
#     G90                            ; absolute positioning
#     G1 Z{move_z} F1800             ; move head to minimum
#     G1 X{purge_x} Y{purge_y} F9000 ; move to purge bucket location
#     {% if ena_neo == 'true' %} _LCD_KNOB COLOR=BLUE {% endif %}
#     {% if printer.extruder.can_extrude|lower == 'false' %}
#       {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
#       G1 Z{z_min_delta} F1800 
#       M109 S{minTemp} ; heat extruder and wait
#     {% endif %}
#     {% if ena_neo == 'true' %} _LCD_KNOB COLOR=RESTORE {% endif %}
#     G1 Z{purge_z} F1800 
#     M83                  ; set extruder to relative
#     G1 E{load} F1800     ; quickly load 90mm filament
#     G1 E{extrude} F300   ; slower extrusion for hotend path
#     G1 E{retract} F1000 ; retract 
#     SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'
#     # clean nozzle
#     _WIPE
#     G1 Z{move_z} F1800        
#     G1 X{purge_x} Y{purge_y} F9000 ; move to purge bucket location
#     # restore old extruder temperature
#     M109 S{extruder_target}
#     {% if ena_runout == 'motion' %}
#       _PRINT_AR T="RUNOUT Motion Sensor Enable: true"
#       SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
#     {% endif %}
#     _PRINT_AR T="Filament loaded"
#     RESTORE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
#   {% else %}
#     _PRINT_AR T="Filament loading disabled while printing!"
#   {% endif %}
 