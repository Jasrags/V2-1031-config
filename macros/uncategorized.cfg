# [gcode_macro JASON]
# gcode:
#   {% set type = params.TYPE|default('ABS')|trim|upper %}
#   {% set string_nevermore_filament_types = params.NEVERMORE_FILAMENT_TYPES|default('ABS,ASA')|upper|replace(" ", "") %}
#   # {% set nevermore_filament_types = string_nevermore_filament_types.split(',') %}
#   { action_respond_info("string_nevermore_filament_types: '%s'" % string_nevermore_filament_types) }
#   # { action_respond_info("nevermore_filament_types: '%s'" % nevermore_filament_types) }

#   {% if type in string_nevermore_filament_types %}
#     { action_respond_info("found %s in %s" % (type, nevermore_filament_types)) }
#   {% else %}
#     { action_respond_info("%s not found in %s" % (type, nevermore_filament_types)) }
#   {% endif %}


[gcode_macro TEST_CALIBRATE]
description: Command to test CALIBRATE macro.
gcode:
    # command params
    {% set target_bed = params.BED|default(110)|int %}
    {% set target_extruder = params.EXTRUDER|default(150)|int %}
    {% set fl_size = params.SIZE|default("0_0_0_0")|string %}
    # variables 
    {% set default_display_lights_color = printer['gcode_macro _USER_VARIABLE'].default_display_lights_color|lower %}
    {% set default_case_lights_color = printer['gcode_macro _USER_VARIABLE'].default_case_lights_color|lower %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}

    {% if ena_debug == "true" %}
        {action_respond_info('==== TEST_CALIBRATE ====')}
        {action_respond_info("targets [bed: %s, extruder: %s]" % (target_bed,target_extruder))}
        {action_respond_info("default_lights_color: [display:%s,case:%s]" % (default_display_lights_color,default_case_lights_color))}
        {action_respond_info("fl_size: %s" % (fl_size))}
        {action_respond_info('===============')}
    {% endif %}

    white
    BED_MESH_CLEAR ; Clear any loaded mesh
    M104 S{target_extruder}
    M140 S{target_bed}
    CALIBRATE SIZE={fl_size}
    M84 ; Disable steppers
    {default_display_lights_color} CASE=0
    {default_case_lights_color} DISPLAY=0
    SONG_SINGLE_BEEP


[gcode_macro PARK_PRINT_RESET]
description: Park the toolhead for nozzle cleaning and print restart
gcode:
    white
    M104 S150
    M140 S110
    PARK_FRONT_MID

[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/autocommit.sh
timeout: 30.0
verbose: True

[gcode_macro BACKUP_CFG]
description: Backup klipper_config to github
gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg

[delayed_gcode _CHECK_CONFIG]
initial_duration: 0.1
gcode:
  ## exexcute _USER_VARIABLE once at startup to do the needed calcs
  {% if printer['gcode_macro _USER_VARIABLE'] is not defined %}
    { action_respond_info(
        "CONFIG: ERROR\n"
        "_USER_VARIABLE macro missing\n"
        "This holds common variables for your printer and must be defined") }
  {% else %}
    _USER_VARIABLE
    ##### consistent check #####
    {% if printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower == 'z_calib' and 
      printer['gcode_macro _USER_VARIABLE'].probe_type|lower == 'unknown' %}
      {action_respond_info(
      "CONFIG: ERROR\n"
      "[z_calibration] defined but no probe found\n")}
    {% endif %}    
  {% endif %}
  ## check if save_variables are defined
  {% if 'save_variables' not in printer %}
    {action_respond_info(
      "CONFIG: ERROR\n"
      "[save_variables] missing\n"
      "This is needed to store variables to a file")}
  {% endif %}
  DUMP_WARNINGS
