#######################################################################################################################################

# Sample macro config to be used in conjunction with the Decontaminator Purge Bucket & Nozzle Scrubber mod. Created by Hernsl 
# (hernsl#8860 on Voron Design discord) and edited by Edwardyeeks (edwardyeeks#6042 on Voron Design Discord).

# The goal of this macro is to provide a nozzle scrubbing and purging routine that is easily copied/referenced into your  printer.cfg.
# Users can simply change parameters and enable/disable options in the first half. Descriptions are laid out in sequence to be read
# first; PLEASE READ CAREFULLY.

# This sample config assumes the following: The user has implemented the default decontaminator purge bucket & nozzle scrubber mod
# for the VORON 1/2.

# Features in this macro: option of putting the bucket at the rear or front of the bed. Purge routine that can be enabled/disabled.
# By default, bucket is located at rear left of bed and purge routine is enabled.

# Default parameters are set for safe speeds and movements. Where necessary, tweak the parameters for the nozzle scrub procedure 
# to fit your printer.

# To avoid adding length of lines to your main printer.cfg config file, one can upload a config file separately into klipper and
# include it into the main macro. Upload nozzle_scrub.cfg to the same directory as printer.cfg. Usually, it is in /home/pi/.

# Once uploaded, add the following to your printer.cfg in the Macros section: [include /home/pi/nozzle_scrub.cfg] 
# Those running mainsail will need to use the following location instead: [include /home/pi/klipper_config/nozzle_scrub.cfg]

#######################################################################################################################################

[gcode_macro TOGGLE_NOZZLE_CLEAN]
description: Toggle the nozzle clean routine on and off.
gcode:
   # command params
   # variables 
   # features
   {% set ena_debug = printer.save_variables.variables.debug|lower %}
   {% set ena_nozzle_clean = printer.save_variables.variables.nozzle_clean|default("false")|lower %}

	{% if ena_debug == "true" %}
		{action_respond_info('==== TOGGLE_NOZZLE_CLEAN ====')}
		{action_respond_info("ena_nozzle_clean: %s" % (ena_nozzle_clean))}
		{action_respond_info('===============')}
	{% endif %}

	{% if ena_nozzle_clean == "false" %}
		{action_respond_info('nozzle_clean is off, turning it on')}
		SAVE_VARIABLE VARIABLE=nozzle_clean VALUE='"true"'
	{% else %}
		{action_respond_info('nozzle_clean is on, turning it off')}
		SAVE_VARIABLE VARIABLE=nozzle_clean VALUE='"false"'
	{% endif %}

[gcode_macro TOGGLE_NOZZLE_PURGE]
description: Toggle the nozzle purge routine on and off.
gcode:
	{% set ena_nozzle_purge = printer.save_variables.variables.nozzle_purge|default('false')|lower %}

	{% if ena_debug == "true" %}
		{action_respond_info('==== TOGGLE_NOZZLE_PURGE ====')}
		{action_respond_info("ena_nozzle_purge: %s" % (ena_nozzle_purge))}
		{action_respond_info('===============')}
	{% endif %}

	{% if ena_nozzle_purge == "false" %}
		{action_respond_info('nozzle_purge is off, turning it on')}
		SAVE_VARIABLE VARIABLE=nozzle_purge VALUE='"true"'
	{% else %}
		{action_respond_info('nozzle_purge is on, turning it off')}
		SAVE_VARIABLE VARIABLE=nozzle_purge VALUE='"false"'
	{% endif %}

[gcode_macro CLEAN_NOZZLE]
description:
variable_location_bucket_rear: True
variable_purge_len: 20 ; Amount of filament, in mm, to purge.
variable_purge_spd: 150 ; Speed, in mm/s, of the purge.
variable_purge_temp_min: 240 ; Minimum nozzle temperature to permit a purge.
variable_brush_top: -0.5 ; How far to lower the nozzle into the brush
variable_clearance_z: 5 ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty: 3 ; Number of complete (1 wipe: start left, go right, go left) wipes.
variable_prep_spd_xy: 3000 ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z: 1500 ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy: 5000 ; Nozzle wipe speed in mm/min.
variable_brush_start: 53
variable_brush_front: 0          
variable_brush_depth: 0          
variable_bucket_left_width: 60
variable_bucket_start: 0

###############################################################################################################################################
###############################################################################################################################################

### From here on, unless you know what you're doing, it's recommended not to change anything.

###############################################################################################################################################
###############################################################################################################################################

variable_bucket_pos: 0 ; Always left bucket (0)
variable_brush_width: 36 
variable_bucket_right_width: 0
variable_bucket_gap: 30

gcode:
   # command params
   # variables 
   # features
   {% set ena_debug = printer.save_variables.variables.debug|lower %}
   {% set ena_nozzle_clean = printer.save_variables.variables.nozzle_clean|default("false")|lower %}
   {% set ena_nozzle_purge = printer.save_variables.variables.nozzle_purge|default("false")|lower %}

   {% if ena_debug == "true" %}
      {action_respond_info('==== CLEAN_NOZZLE ====')}
      {action_respond_info("brush_depth: %s" % (brush_depth))}
      {action_respond_info("brush_front: %s" % (brush_front))}
      {action_respond_info("brush_start: %s" % (brush_start))}
      {action_respond_info("brush_top: %s" % (brush_top))}
      {action_respond_info("brush_width: %s" % (brush_width))}
      {action_respond_info("bucket_gap: %s" % (bucket_gap))}
      {action_respond_info("bucket_left_width: %s" % (bucket_left_width))}
      {action_respond_info("bucket_pos: %s" % (bucket_pos))}
      {action_respond_info("bucket_right_width: %s" % (bucket_right_width))}
      {action_respond_info("bucket_start: %s" % (bucket_start))}
      {action_respond_info("clearance_z: %s" % (clearance_z))}
      {action_respond_info("ena_nozzle_clean: %s" % (ena_nozzle_clean))}
      {action_respond_info("ena_nozzle_purge: %s" % (ena_nozzle_purge))}
      {action_respond_info("location_bucket_rear: %s" % (location_bucket_rear))}
      {action_respond_info("prep_spd_xy: %s" % (prep_spd_xy))}
      {action_respond_info("prep_spd_z: %s" % (prep_spd_z))}
      {action_respond_info("purge_len: %s" % (purge_len))}
      {action_respond_info("purge_spd: %s" % (purge_spd))}
      {action_respond_info("purge_temp_min: %s" % (purge_temp_min))}
      {action_respond_info("wipe_qty: %s" % (wipe_qty))}
      {action_respond_info("wipe_spd_xy: %s" % (wipe_spd_xy))}
      {action_respond_info('===============')}
   {% endif %}

   # First, check if the axes are homed.
   {% if ena_nozzle_clean != "true" %}
      { action_respond_info("Nozzle clean disabled") }
   {% else %}
      _CG28
      
      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=clean_nozzle
      G90

      ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
      {% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}

      ## Check if user enabled purge option or not.
      {% if ena_nozzle_purge == "true" %}
         ### Raise Z for travel.
         G1 Z{brush_top + clearance_z} F{prep_spd_z}

         ### Check if user chose to use rear location.
         {% if location_bucket_rear %}
            G1 Y{Ry} F{prep_spd_xy}
         {% else %}
            G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
         {% endif %}

         ### Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
         G1 X{bucket_start + (bucket_left_width / 2) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}

         ### Perform purge if the temp is up to min temp.
         {action_respond_info("printer.extruder.can_extrude: %s" % (printer.extruder.can_extrude))}
         {action_respond_info("printer.extruder.temperature: %s" % (printer.extruder.temperature))}
         {% if printer.extruder.can_extrude|lower == 'true' and printer.extruder.temperature >= purge_temp_min %}
            M83 ; relative mode
            G1 E{purge_len} F{purge_spd}
            RESET_EXTRUDER
         {% endif %}
      {% endif %}
   
      ## Position for wipe.
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{brush_start} F{prep_spd_xy}

      ## Check if user chose to use rear location.
      {% if location_bucket_rear %}
         G1 Y{Ry}
      {% else %}
         G1 Y{brush_front + (brush_depth / 2)}
      {% endif %}

      ## Move nozzle down into brush.
      G1 Z{brush_top} F{prep_spd_z}
   
      ## Perform wipe.
      {% for wipes in range(1, (wipe_qty + 1)) %}
         G1 X{brush_start + brush_width} F{wipe_spd_xy}
         G1 X{brush_start} F{wipe_spd_xy}
      {% endfor %}
   
      ## Clear from area.
      M117 Cleaned!
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{bucket_left_width / 4} F{prep_spd_xy} 

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle
   {% endif %}

